modification at a later stage. Bin- with the required risk reduction, in the same way as for ding programming guidelines facilitate, among other the hardware of the programmable SRP/CS. The require- things, better commenting of the program and the ments and their effectiveness are therefore increased assignment of self-explanatory names to variables and intelligently in line with rising PL. r modules. Figure 6.12 shows that a suitable package of basic meas- • Defensive programming, i.e. the assumption that inter- ures is first set out for all PLs for both SRASW and SRESW. nal or external errors may always be present, and detec- These basic measures can be regarded as software-speci- tion of them. If the characteristic of input signals over fic basic safety principles. They are sufficient for the deve- time is known, for example, this anticipatory approach lopment of software for PL a or b. For software employed can be used to detect errors in the peripheral circuitry. in SRP/CS for PL c to e, the basic measures are supple- If a finite-state machine is being programmed, the state mented by additional measures for fault avoidance. The variable is monitored for a valid value range, etc. latter are required for PL c with lower effectiveness, for PL d with medium effectiveness and for PL e with higher • The code must be analysed statically, i.e. without exe- effectiveness. Irrespective of whether the software now cution: for low PLs, a code review is sufficient; for PLs acts in only one or in both channels of a desired Category, d and e, the data and control flow should also be exa- the PL of the implemented safety function(s) is always the r mined, ideally with the use of tools. Typical questions yardstick for the requirements. are: is the code consistent with