SAFETY FUNCTION Safety relay Parameterizable controller Configurable controller Programmable controller Figure 99: Illustration of the preferred fields of application of safe control technologies depending on the number of sensors and safety functions The functionality of the logical operators — e.g., simple AND, Flipflop, or special functions such as muting — also affects the selection. Figure 100: Example of a safe software function block for muting with inputs and outputs 8007988/2024-10-21 | SICK SPECIAL INFORMATION | Guide for Safe Machinery 117 Subject to change without notice Software specification Design Matrix Safety outputs To prevent the occurrence of a dangerous state, soft‐ 0 = Logical 0 or OFF ware-based logic units in particular shall be designed S = Enable (restart) I = Logic 1 or ON so that they can be relied upon to prevent errors in the – = any status logic. To detect systematic errors, a thorough system‐ atic check should be made by someone other than the designer and thus the principle of counter-checking by a second person applied. A simple way of implementing this specification is the so-called design matrix. Here certain combinations of safety-related input signals for specific cases (e.g., “position lost”, or “robot left”) are combined. These cases shall act on the machine functions via the safety- related outputs in accordance with the requirements of the safety function. This simple method is also used by SICK during the design of application software. It is advisable to have this reviewed by all involved in the project. In the case of programs that are poorly documented and unstructured, errors occur during subsequent mod‐ ifications; in particular, there is a risk of unknown dependencies or side effects, as they are often referred to. When the software is developed externally, good specifications and program documentation are very effective in avoiding