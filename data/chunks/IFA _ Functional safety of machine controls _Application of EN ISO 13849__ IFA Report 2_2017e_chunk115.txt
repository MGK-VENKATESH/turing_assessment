machine manufacturer must determine the T values of safety-related components based 10D 63 6 Design of safe control systems The publications referred to above employ a special fault 6.3 Development of safety-related software model in which consideration is given to the use of a black-box channel for the transmission of safety-related Comments such as the following are frequently heard: data: in other words, no particular requirements for fault “Of course, a software programmer with years of experi- detection, for example, are placed upon this transmis- ence no longer makes mistakes.” This hubris is in fact the sion channel itself. The model assumes the repetition, greatest mistake of all. Software is generally complicated, loss, insertion, incorrect sequence, corruption and delay which is why the number of failures caused by software of safety-related messages and the coupling of safety- faults is on the rise, in contrast to the situation for hard- related and non-safety-related messages as possible ware. How often are PC users surprised when a computer faults. Further possible aspects include faults that syste- peripheral ceases to work, and how often does the prob- matically corrupt messages, for example by completely lem turn out to have been caused by a part of the software inverting them. Measures in “safety layers” that are then that was not compatible with another piece of software, implemented in safety-related parts of control systems such as a driver? By contrast, hardware tend to be rare. enable transmission faults to be excluded with sufficient According to [41], normal software, i.e. simple software probability. Suitable measures include, for example, for simple functions, contains approximately 25 errors per the sequence number, timestamp, time expectations, 1,000 lines of code. Also according to [41], well written connection authentication, feedback message and data software contains around two to three errors per 1,000