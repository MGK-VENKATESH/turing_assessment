every second to make sure that they can turn the output off. If one of the three fails, the output is turned off by the other two, and the fault is reported by the internal monitoring circuit. When using safety devices with mechanical contacts (emergency stops, gate switches, etc), the user can apply pulse test signals to detect cross-faults. Software Safety PLCs program very much like standard PLCs do. All of the additional diagnostics and error checking mentioned earlier is done by the operating system, so the programmer is not even aware that it is happening. Most safety PLCs will have special instructions used to write the program for the safety system, and these instructions tend to mimic the function of their safety relay counterparts. For example, the Emergency Stop instruction operates very much like an MSR. Though the logic behind each of these instructions is complex, the safety programs look relatively simple because the programmer simply connects these blocks together. These instructions, along with other logical, math, data manipulation, etc. instructions are certifi ed by a third party to ensure their operation is consistent with the applicable standards. Function blocks are the predominant methods for programming safety functions. In addition to Function Blocks and Ladder Logic, safety plc’s also provide certifi ed safety application instructions. Certifi ed safety instructions provide application specifi c behaviour. MACHINERY SAFEBOOK 5 Implementation of Protective Measures Certifi ed function blocks are available to interface with almost all safety devices. One exception to this list is the safety edge that uses resistive technology. Safety PLCs generate a “signature” that provides the ability to track whether changes were made. This signature is usually a combination of the program, input/output confi guration, and a time stamp. When the program is fi nalized and validated, the user should