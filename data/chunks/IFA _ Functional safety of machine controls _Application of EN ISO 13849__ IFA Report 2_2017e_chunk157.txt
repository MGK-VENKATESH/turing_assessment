for tools-based static ana- single Category and no subsystems are combined, corres- lysis for verification of coding are also specified. Planning ponding analysis in accordance with subclause 6.4 is not of module and integration testing is also set out in this required. It is obvious nevertheless that the various com- document. Following a further review, for example by the ponents and technologies must be compatible at their software development manager, the technical specifica- interfaces. Validation aspects regarding integration are tion is approved as a specification for coding. This review addressed in Chapter 7. also verifies whether the requirements of the software specification are met. 6.5.11 Further details Coding proper now begins, in compliance with the pro- Even in this detailed circuit example, numerous safety- gramming guidelines. Besides rules for better code related design aspects can only be touched upon. A legibility, the provisions of the programming guidelines reference is therefore provided here, as in the majority of specify such things as constraints upon the use of critical the circuit examples that follow, of useful reference con- language constructs. Observance of the programming taining further explanations and referring to additional guidelines during coding is assured in-process by the use requirements. of suitable tools. For semantic verification (of the content) of the finished code against the technical specification, More detailed references the programmer conducts a walk-through with colleagues in which execution of the program and the data flow of • EN 1010-3: Safety of machinery – Safety requirements critical signals are analysed at the same time. for the design and construction of printing and paper converting machines – Part 3: Cutting machines The usual module tests are performed to check the func- (2002) +A1 (2009) tions and interfaces, firstly for correctness and secondly for compliance with the module design. This is followed