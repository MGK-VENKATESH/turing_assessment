type. As in other current standards containing explanations provided in this subclause – are therefore requirements for software, a distinction is drawn be tween aimed in particular at fault avoidance in these phases. the language types FVL (full variability language) and Sadly, less attention is often paid in practice to these pha- LVL (limited variability language). SRASW is generally ses of application programming. programmed in LVL, for example in a graphical language as defined in IEC 61131-3. The requirements contained in In order for the safety-related software produced to be of subclause 4.6.3 of EN ISO 13849-1 apply in this case. high quality, it is clear that suitable up-to-date and well- tried “software engineering” development models should As soon as SRASW is programmed in FVL (for example, be followed. For safety-related systems, reference is gene- a PLC in the high-level language “C”), however, the re - rally made in this context to the “V model” [45]. Since the quirements for SRESW contained in subclause 4.6.2 of the V model familiar from the reference is generally used for standard must be met. If the SRASW is required to satisfy very complex software, EN ISO 13849-1, subclause 4.6.1 a Performance Level of e in this case, EN ISO 13849-1 requires only a more simplified form of it (Figure 6.11). refers at the end of subclause 4.6.2, once only, but with exceptions, to the requirements of IEC 61508-3:1998. Development model: simplified V -Modell Objective: readable, comprehensive, testable and maintainable software Specification of the safety Validated functions Safety-related software software Validation Validation specification System Integration design tests Design Testing activities activities Module Module design tests Figure 6.11: Result Simplified V model Coding for the development Verification of safety-related software 65 6 Design of safe control systems This form is considered to be appropriate for