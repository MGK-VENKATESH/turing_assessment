the practical mented by the software. In addition, the following are conditions and the objectives for safety-related SRP/CS in presented: the machinery sector and specifically for the development of SRASW. The actual objective here is the creation of rea- • Functions that detect and control hardware faults dable, understandable, testable and maintainable soft- ware. Programmers who do not normally develop safety- • Performance characteristics, such as the maximum related software are likely to consider these requirements response time tedious. However, they provide them with the certainty of having developed the software to an adequate standard. • Fault-mode responses In addition to the phases, Figure 6.11 also shows impor- • Interfaces provided to other systems, etc. tant terminology that must first be defined (in a software context). Besides these functional requirements, the PL to be attained by the safety functions, the PL, must be stated, r Result in order to permit selection of the necessary measures for fault avoidance (see further below). Refers to the product of a phase, for example the specifi- cation, the software design, the code, and in the case of This specification (or “safety-related software require- the final result, the tested, validated software. It may how- ments specification”) must be verified, for example by a ever also refer for example to the result of a specification review performed by a person not involved in its creation. phase in the form of a test plan that is not required until a The reviewer must confirm firstly that the requirements much later phase, at which it can be used for systematic specification complies with the higher-level specification, validation of the software. The result(s) of the preceding and secondly that it satisfies the formal requirements phases serve as inputs for the subsequent phases. This is governing how a software specification