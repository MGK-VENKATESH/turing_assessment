in system design (verification). Both are still verification all cases to a function block. measures, i.e. they involve looking “into” the software. Whether the safety-related sub-functions of the software The software design document should describe the struc- perform as specified is determined by software validation, ture and process of the software, supported by diagrams, which has already been described. For the higher PLs d in a way that makes these aspects comprehensible to and e, an extended functional test is also required. external parties. The more the program is based upon re- used software functions that have already been validated Individual software functions that have been certified or and are already documented elsewhere, the more concise validated by quality assurance measures do not need to the software design document can be. The module design be tested again. As soon as a number of these functions also specifies the new software functions that are to be are combined for a specific project, however, the resulting produced specifically for the project, their interfaces, and new form of safety sub-function must be validated. Even test cases for their module test. For less complex SRP/CS, on certified modules, dangerous systematic failures may the system and module design can be summarized in a be caused by errors in parameterization and logic. “safety-related software technical specification”. 6.3.6 Structure of the normative requirements 6.3.4 Finally: programming Once the design process has been outlined, normative Coding work proper then begins. In the interests of fault requirements are described for the software itself, for the avoidance, the following three aspects must be observed: development tools used, and for the development acti- vities. These requirements also contribute towards fault • Code must be readable and clear, in order to facilitate avoidance. The effort involved should be commensurate testing and error-free