selection. 3 c Number of safety functions 7028282/2014-09-08 GUIDE FOR SAFE MACHINERY | SICK 3-69 Subject to change without notice srosnes fo rebmuN Safety relay Parameterizable controller Configurable controller Programmable controller Design matrix 0 = logic 0 or OFF S = actuator enable (restart) I = logic 1 or ON – = any status tceffE Safety outputs stupni ytefaS stoboR tfel no elbaT thgir no elbaT ... ... Simple AND logic operator Input 1 Output 1 Input 2 Muting function logic operator Light Curtain Output enable A1 Muting Sensor Muting Lamp Control A2 Muting Sensor A3 Muting Sensor Muting Status A4 Muting Sensor Override Required Muting Error Override Pushbutton MUTING Conveyor Signal Function block C1 Signal Software specification To prevent the occurrence of a dangerous state, software-based logic units in particular shall be designed so that they can be relied upon to prevent faults in the logic. To detect systematic failures, a thorough systematic check should be made by some- one other than the designer and thus the principle of counter- checking by a second person applied. A possible way of implementing this specification is what is known as the design matrix. Here, certain combinations of safety-related input signals for specific cases (e.g., “position lost,” or “robot left”) are combined. These cases shall act on the machine functions via the safety-related outputs in ac- cordance with the requirements of the safety function. This method is also used by SICK during the design of application software. A review with all those involved in the project is sensible. In the case of programs that are poorly documented and unstructured, faults occur during subsequent modifications; in particular, there is a danger of unknown dependencies or side Case effects, as they are often referred to. Good specifications and program documentation are very effective in