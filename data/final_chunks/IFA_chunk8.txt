January 1995, all machines placed on the market port the underlying philosophy set out in Annex I of the within the European Economic Area have been required Machinery Directive for the attainment of occupational to satisfy the essential requirements of the Machinery safety and health on machines. EN ISO 12100 [3], a Type Directive [1]. In accordance with Article 2 of this directive, A standard now comprising a single part only, governs a machine is the assembly of linked parts or components, basic concepts and general principles for design for the at least one of which moves, with the appropriate actua- safety of machinery. Content of the former EN ISO 14121-1 tors, control and power circuits, etc., joined together for a standard – the full procedure for identifying hazards and specific application, in particular for the processing, treat- for risk estimation and risk evaluation of each indivi- ment, moving or packaging of a material. In the amended dual hazard – has also been incorporated into the new 2006/42/EC [2] version of the Machinery Directive, safety EN ISOthe practical mented by the software. In addition, the following are conditions and the objectives for safety-related SRP/CS in presented: the machinery sector and specifically for the development of SRASW. The actual objective here is the creation of rea- • Functions that detect and control hardware faults dable, understandable, testable and maintainable soft- ware. Programmers who do not normally develop safety- • Performance characteristics, such as the maximum related software are likely to consider these requirements response time tedious. However, they provide them with the certainty of having developed the software to an adequate standard. • Fault-mode responses In addition to the phases, Figure 6.11 also shows impor- • Interfaces provided to other systems, etc. tant terminology that must first be defined (in a software context). Besides these functional requirements, the PL to be attained by the safety functions, the PL, must be stated, r Result in order to permit selection of the necessary measures for fault avoidance (see further below). Refers to the product of a phase, for example the specifi- cation, the software design, the code, and in the case of This specification (or “safety-related software require- the final result, the tested, validated software. It may how- ments specification”) must be verified, for example by a ever also refer for example to the result of a specification review performed by a person not involved in its creation. phase in the form of a test plan that is not required until a The reviewer must confirm firstly that the requirements much later phase, at which it can be used for systematic specification complies with the higher-level specification, validation of the software. The result(s) of the preceding and secondly that it satisfies the formal requirements phases serve as inputs for the subsequent phases. This is governing how a software specificationis to be written. indicated by the arrow. The specification should be structured and generated in detail in such a way that it can also serve as a checklist for Verification later validation. Describes the quality assurance activity by which the The overall safety of a machine or machinery installation result of a phase is checked against the specification of is assured by all safety-related parts of the control system the preceding phase. During or at the end of the coding and their functions (components of all technologies, elec- phase, for example, verification is performed of whe- tronics, software). A description is therefore required at ther the code actually implements the specified module this point, in the form of a specification, of the safety for design, and whether the programming guidelines have the machine/machinery installation. The document need been observed in the process. not run into the hundreds of pages; it is acceptable for it to be limited to the essential points in a comprehensible Validation form. The specifications for the machine or machinery in stallation as a whole will be followed by a subset of In this context, software validation is a concluding, spe- tasks for programmers. The software specification thus cial form of verification of the entire software. A check is forms a part of the overall concept, and can therefore be performed of whether the requirements of the software regarded as a “contract” with a “subcontract” for the pro- specification concerning the functionality of the software gramming function. have been implemented. The software specification begins with provisions con- Selected phases of the simplified V model, and thus at cerning design and coding of the software. The other the same time the “roadmap” for software development, elements involved in assuring safety must be able to rely are describedbelow. The downward-pointing part of the upon implementation of the functions in the software. The “V” describes the design activities of development, the specification is thus also the point of reference for accep- upward-pointing part the review activities. tance of the software: validation of the software functions must demonstrate whether the “contractual obligations” 6.3.2 Overall safety interface: software have been met. In the area of SRASW, this must be taken specification literally, since the engineering and programming of a con- trol system are often assigned by the parties responsible This document describes, based upon the higher-level for safety as a whole to other companies or corporate specification of the safety functions of the SRP/CS, the divisions. In this case, the specification also serves as a sub-functions of the specification that are to be imple- contractually binding interface to external or internal ser- vice providers. 66 6 Design of safe control systems 6.3.3 System and module design for the 6.3.5 Module test, integration test and “safety-related technical specification” validation The software architecture is generally already defined by In the module test, the new software functions developed the operating system or the development tool. The design specifically for the project are tested and simulated in further defines the structure and modules to be employed order to check whether they are coded as specified in the for implementation of