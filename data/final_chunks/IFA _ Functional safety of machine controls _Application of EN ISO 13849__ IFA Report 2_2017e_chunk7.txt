the values first time of requirements concerning software and its determined for the SRP/CS. Comprehensive information development. For the sake of emphasis at this point: the on bus systems for the transmission of safety-related requirements in subclause 4.6 of the standard enable information can be found for example in [40]. safety-related software to be developed for all SRP/CS in the machinery sector and for all required Performance Where a bus system (i.e. its components), which is gene- Levels from a to e. This subclause is intended in the first rally tested by an independent body, is employed for the instance for application programmers tasked with deve- implementation of safety functions, planning of its use loping the safety functions for a machine, for example and proper implementation with regard to fault avoidance in an application-oriented language on a programmable are of great importance. A large number of parameters logic controller (PLC). By contrast, these requirements in must be set correctly; this process is supported to a grea- EN ISO 13849-1 are not particularly new to developers of ter or lesser degree by relevant tools. SRESW (safety-related embedded software), i.e. firmware or software tools for electronic safety components. Such Should none of the known, already assessed profiles “embedded software” developments for the components, for functional safety be used, the assumed transmission which are generally certified, are often subject to the very errors stated above must be considered, suitable (coun- complex requirements of the IEC 61508-3 basic safety ter) measures implemented, and the residual error rate standard [42] (and its further seven parts), which is bin- Λ in consideration of the typical bit error rate of 0.01 con- ding for IEC standards governing functional safety. sidered during calculation of the total failure probability PFH . Test principles GS-ET-26 [38] provide information on IFA Report 2/2016 on safety-related application software D calculation of the residual error rate Λ. for machinery [43] has been published, addressing the programming of SRASW (safety-related application soft- ware). This report describes the IFA's matrix method for the specification, verification, validation and documen- 64 6 Design of safe control systems tation of SRASW. The matrix method can also be used 6.3.1 Error-free software … with the IFA's SOFTEMA tool [44]. In addition, the report provides detailed further information on the programming … unfortunately does not exist in the real world. In con- of SRASW. The descriptions below are therefore limited trast to hardware faults, which occur as a result of random to a brief presentation of the normative requirements of component failure, the causes of software faults are EN ISO 13849-1 concerning safety-related software. systematic. It is therefore all the more important that all reasonable steps be taken to avoid errors during the deve- The basic principles of this subclause can be applied to lopment of safety-related software, the purpose of which both software types. Individual requirements tend to be is after all that of minimizing risks. What is considered formulated in detail more for application programming of reasonable is determined on the one hand by the required SRASW. Conversely, the example described in subclause Performance Level PL. At the same time, safety-critical r 6.5 of a control system for a paper-cutting guillotine faults tend to creep into particular phases of software shows the development of SRESW. development, where, devastatingly, they remain undetec- ted until they cause a failure in operation. These phases The requirements governing software development are are known to be those of specification, design and modi- geared to the software type (SRASW or SRESW) and the fication. The requirements of EN ISO 13849-1 – and the language type. As in other current standards containing explanations provided in this subclause – are therefore requirements for software, a distinction is drawn be tween aimed in particular at fault avoidance in these phases. the language types FVL (full variability language) and Sadly, less attention is often paid in practice to these pha- LVL (limited variability language). SRASW is generally ses of application programming. programmed in LVL, for example in a graphical language as defined in IEC 61131-3. The requirements contained in In order for the safety-related software produced to be of subclause 4.6.3 of EN ISO 13849-1 apply in this case. high quality, it is clear that suitable up-to-date and well- tried “software engineering” development models should As soon as SRASW is programmed in FVL (for example, be followed. For safety-related systems, reference is gene- a PLC in the high-level language “C”), however, the re - rally made in this context to the “V model” [45]. Since the quirements for SRESW contained in subclause 4.6.2 of the V model familiar from the reference is generally used for standard must be met. If the SRASW is required to satisfy very complex software, EN ISO 13849-1, subclause 4.6.1 a Performance Level of e in this case, EN ISO 13849-1 requires only a more simplified form of it (Figure 6.11). refers at the end of subclause 4.6.2, once only, but with exceptions, to the requirements of IEC 61508-3:1998. Development model: simplified V -Modell Objective: readable, comprehensive, testable and maintainable software Specification of the safety Validated functions Safety-related software software Validation Validation specification System Integration design tests Design Testing activities activities Module Module design tests Figure 6.11: Result Simplified V model Coding for the development Verification of safety-related software 65 6 Design of safe control systems This form is considered to be appropriate for a reference work. It is not, of course, a sub- ding machine construction. Not least thanks to the close stitute for the standard itself. However, it contains valu- involvement of experienced experts at the IFA, the authors able advice, and in particular, experience and guidance of EN ISO 13849-1 have succeeded in presenting its con- that has already been developed in the field. tent and developing it further such that it remains practi- cal in its application, despite the complexity of the sub- ject-matter. The preceding EN 954 standard with its purely deterministic requirements has finally been re placed. The