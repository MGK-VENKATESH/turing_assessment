and simulated in further defines the structure and modules to be employed order to check whether they are coded as specified in the for implementation of the specified safety sub-functions. module design. At the integration test at the latest, for What existing library functions are to be employed must example during the typical commissioning of a machine's be determined, as must whether new functions may have PLC, the complete software is tested for proper operation to be developed specifically for the project. In this sub- on the hardware (integration) and compliance with the clause, the term software function/module also refers in system design (verification). Both are still verification all cases to a function block. measures, i.e. they involve looking “into” the software. Whether the safety-related sub-functions of the software The software design document should describe the struc- perform as specified is determined by software validation, ture and process of the software, supported by diagrams, which has already been described. For the higher PLs d in a way that makes these aspects comprehensible to and e, an extended functional test is also required. external parties. The more the program is based upon re- used software functions that have already been validated Individual software functions that have been certified or and are already documented elsewhere, the more concise validated by quality assurance measures do not need to the software design document can be. The module design be tested again. As soon as a number of these functions also specifies the new software functions that are to be are combined for a specific project, however, the resulting produced specifically for the project, their interfaces, and new form of safety sub-function must be validated. Even test cases for their module test. For less complex SRP/CS, on certified modules, dangerous systematic failures may the system and module design can be summarized in a be caused by errors in parameterization and logic. “safety-related software technical specification”. 6.3.6 Structure of the normative requirements 6.3.4 Finally: programming Once the design process has been outlined, normative Coding work proper then begins. In the interests of fault requirements are described for the software itself, for the avoidance, the following three aspects must be observed: development tools used, and for the development acti- vities. These requirements also contribute towards fault • Code must be readable and clear, in order to facilitate avoidance. The effort involved should be commensurate testing and error-free modification at a later stage. Bin- with the required risk reduction, in the same way as for ding programming guidelines facilitate, among other the hardware of the programmable SRP/CS. The require- things, better commenting of the program and the ments and their effectiveness are therefore increased assignment of self-explanatory names to variables and intelligently in line with rising PL. r modules. Figure 6.12 shows that a suitable package of basic meas- • Defensive programming, i.e. the assumption that inter- ures is first set out for all PLs for both SRASW and SRESW. nal or external errors may always be present, and detec- These basic measures can be regarded as software-speci- tion of them. If the characteristic of input signals over fic basic safety principles. They are sufficient for the deve- time is known, for example, this anticipatory approach lopment of software for PL a or b. For software employed can be used to detect errors in the peripheral circuitry. in SRP/CS for PL c to e, the basic measures are supple- If a finite-state machine is being programmed, the state mented by additional measures for fault avoidance. The variable is monitored for a valid value range, etc. latter are required for PL c with lower effectiveness, for PL d with medium effectiveness and for PL e with higher • The code must be analysed statically, i.e. without exe- effectiveness. Irrespective of whether the software now cution: for low PLs, a code review is sufficient; for PLs acts in only one or in both channels of a desired Category, d and e, the data and control flow should also be exa- the PL of the implemented safety function(s) is always the r mined, ideally with the use of tools. Typical questions yardstick for the requirements. are: is the code consistent with the preceding software design? Do any points exist at which signals with a The aspect of “higher effectiveness” refers to the rising lower PL (for example from a standard PLC) override a level of fault avoidance. This may be illustrated by the signal with a higher PL? Where and by what modules are important task of production of the specification. For PL c, variables initialized, written to, and then assigned to for example, it may be sufficient for programmers to write the safety output? What software functions are executed the specification themselves and for it to be reviewed by conditionally? others (internal review). Should the same software 67 6 Design of safe control systems 4.6.1 Objective; development model (simplified V model) Safety-related embedded software (SRESW) Additional requirement: Basis: Reference: increasing effectiveness 4.6.2 PL a, b PL e PL c, d Safety-related application software (SRASW ) 4.6.3 Additional requirement: increasing Basis: effectiveness PL a, b PL c, d and e Figure 6.12: Grading of the requirements for safety- 4.6.4 Software-based parameterization related software (EN ISO 13849-1) 68 1-94831 OSI NE fo snoitceS be employed for PL e, however, a higher level of fault tematic faults in this SRASW. Irrespective of this, the avoidance must be attained. It may then be necessary normative requirements for the SRESW must also be for the specification to be written by the software project observed (subclause 6.3.10). manager, for example, rather than the programmers. In addition, the review of this specification could be perfor- • Use of standard PLCs: the circuit examples in this report med jointly with a more independent person, such as the (see Chapter 8, Page 99 ff.) demonstrate that standard person responsible for hardware engineering. More eyes PLCs can in principle also be used to engineer safety- (generally) find more errors. A