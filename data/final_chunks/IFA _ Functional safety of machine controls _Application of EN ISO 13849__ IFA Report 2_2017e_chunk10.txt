comprehensive discussion related control systems. Only for PL e is it likely to be of the individual requirements and of their greater or very difficult to attain the required “high” level of dia- lesser effectiveness is unfortunately beyond the scope of gnostic coverage DC of at least 99% for the hardware the present report. Discussion will therefore be limited to of a PLC – at least if this diagnostic coverage is to be certain particular cases: implemented by the SRASW. For PL a to d, the software requirements for the standard PLC are described in • It is not uncommon for cohesive software of SRP/CS to subclause 6.3.10. The requirements for the avoidance implement several safety functions (SFx) of differing PL of errors in SRASW (subclauses 4.6.1 and 4.6.3 of the r (e.g. SF1 and SF2 with PL c, SF3 with PL e). In practice standard) in accordance with the PL must also be met r r r however, it is unlikely to be possible to differentiate during application programming. The topic of systema- between the safety functions of differing PL in the tic capability requires particular attention. r development cycle, the tools, or the effectiveness of the activities (e.g. during modifications). In this case, the • A bonus during the development of diverse SRESW requirements for fault avoidance are therefore geared is that on two-channel SRP/CS for one or more safety towards the highest PL (in the example given: e). functions with a PL of e, the SRESW of the two channels r r can be implemented diversely. Should the degree of • Redundant SRP/CS of which only one channel is pro- this diversity be so great that the code, the design, and grammable: although the programmable electronics even the specification have been created differently, constitute only a single channel, the overall structure this software can also be developed in accordance with satisfies Category 3 or 4. Safety functions with a hig- the requirements set out in EN ISO 13849-1 for PL d. It is her PL, such as d or e, are frequently implemented by then irrelevant whether the SRP/CS have two different r means of these structures. If programmable electronics or identical hardware channels. are employed in one channel of the part of the control system in diverse redundancy with a technology other 6.3.7 Suitable software tools than programmable electronics (e.g. fluid power tech- nology) in the other channel, the IFA's recommendation No software without tools: this particularly holds true for is that the normative requirements can be reduced by safety-related software. The selection and quality of these one PL level, e.g. for PL c instead of PL d, owing to the tools are therefore decisive factors for the avoidance r r lower probability of a dangerous failure caused by sys- 6 Design of safe control systems of errors and thus for the quality of the safety function. documentation. Where safety-related software is con- EN ISO 13849-1 emphasizes four elements: cerned, this refers in the first instance to specification of the implemented safety functions (requirements • Development tools: specification), the design document (technical specifica- Development requires tools that are suitable and well- tion), and the well-commented program. In addition, the tried for the intended use. Certified tools for safety com- certified or self-validated library functions used must be ponents are generally employed for SRASW. Features listed together with their identification (version number, such as the avoidance and detection of semantic errors, author, date, etc.). Application of the manufacturer's own the observance of language subsets or the monitoring programming guidelines and language subsets must also of programming guidelines relieve programmers of be documented. Should these already be contained in tasks and enhance the quality of the software. the tool, an appropriate reference to these properties is sufficient. Finally, the test activities must be documented. • Libraries of software functions: The integration test and validation of the safety functions The design of the system should consider existing are often performed at the same time. These tests must or supplied libraries and, where practicable, employ obviously be planned and must be documented together validated functions. The following principle applies: with the test results. the more the program is based upon functions that are already validated or indeed certified, the fewer project- What is meant by configuration management? For safety- specific software components remain that must be related software in particular, it is obvious and therefore validated internally or by an external organization prior a requirement that its development be transparent to all to commissioning. For typical recurring functions, sys- parties involved and for subsequent inspections: tem integrators are well advised to invest the necessary effort in developing suitable modules themselves to • Who performed specification, programming, commis- EN ISO 13849-1 such that they can also be re-used and sioning, verification and validation, and when? tested, including by independent persons, routinely and without error. Discrete library functions also require • What was used for development, e.g. tools and their specification, design, test plan, validation, etc. settings, re-used functions and their identification, pro- gramming guidelines? • Suitable programming languages: For SRASW, application-oriented languages are recom- • What program versions are loaded on which SRP/CS? mended, for example in accordance with IEC 61131-3 [46]. Even these languages are more comprehensive This and other necessary information, including all rele- than necessary, and contain constructs that in some vant development documents, must be recorded and cases are error-prone. Programmers should therefore suitably archived for later use, for example for the event of limit the use of the syntax. Corresponding language modification after several years in operation. subsets are generally specified by the tool. 6.3.9 Software is in a constant state of • Programming guidelines: change: modification Suitable programming guidelines must be observed for coding of the software functions [47]. The guidelines Experience has shown that even after having initially been should be the existing, accepted rules of a recognized tested, SRASW will still be the subject of fervent extension organization. Alternatively, a company may draw